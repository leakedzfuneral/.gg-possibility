ChangedTexture = GuiLibrary["ObjectsThatCanBeSaved"]["WorldWindow"]["Api"].CreateOptionsButton({
    ["Name"] = "Changed-Texture-Pack",
    ["HoverText"] = "Made by changed, Inspired by Munis Exe Texture-Pack",
    ["Function"] = function(callback)
        if callback then
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local objs = game:GetObjects("rbxassetid://13248928903")
local Workspace = game:GetService("Workspace")
objs[1].Parent = game:GetService("ReplicatedStorage")

local function weldmodel(model)
for i,v in pairs(model:GetDescendants()) do
    if v:IsA("Part") then
        weld = Instance.new("WeldConstraint",model)
        weld.Part0 = model.PrimaryPart
        weld.Part1 = v
        v.Anchored = false
        v.CanCollide = false
    end
end
end

local index = {
wood = {
    "wood_sword",
    objs[1].wood
},
stone = {
    "stone_sword",
    objs[1].stone
},
iron = {
    "iron_sword",
    objs[1].iron
},
diamond = {
    "diamond_sword",
    objs[1].diamond
},
emerald = {
    "emerald_sword",
    objs[1].emerald
},
rageblade = {
    "rageblade",
    objs[1].rageblade
},
woodaxe = {
    "wood_axe",
    objs[1].woodaxe
},
stoneaxe = {
    "stone_axe",
    objs[1].stoneaxe
},
ironaxe = {
    "iron_axe",
    objs[1].ironaxe
},
diamondaxe = {
    "diamond_axe",
    objs[1].diamondaxe
},
woodpick = {
    "wood_pickaxe",
    objs[1].woodpick 
},
stonepick = {
    "stone_pickaxe",
    objs[1].stonepick 
},
ironpick = {
    "iron_pickaxe",
    objs[1].ironpick 
},
diamondpick = {
    "diamond_pickaxe",
    objs[1].diamondpick 
},
fireball = {
    "fireball",
    objs[1].fireball
},
telepearl = {
    "telepearl",
    objs[1].pearl
},
wood_bow = {
    "wood_bow",
    objs[1].bow
},
snowball = {
    "snowball",
    objs[1].snowball
},
}

local VM = workspace.Camera.Viewmodel
VM.ChildAdded:Connect(function()
for i,v in pairs(VM:GetChildren()) do
    for _,indexed in pairs(index) do
        if indexed[1] == v.Name then
            local new = indexed[2]:Clone()
            weldmodel(new)
            for i,v in pairs(v:GetDescendants()) do
                if v:IsA("Part") or v:IsA("UnionOperation") or v:IsA("MeshPart") then
                    v.Transparency = 1
                end
            end
            new.Parent = v
            new.PrimaryPart.CFrame = v.Handle.CFrame * CFrame.Angles(0,math.rad(90),0)
            local weld1 = Instance.new("WeldConstraint",v)
            weld1.Part0 = new.PrimaryPart
            weld1.Part1 = v.Handle
            local ThirdPersonItem = game.Players.LocalPlayer.Character:FindFirstChild(v.Name)
            if ThirdPersonItem then
                print("3rd person item found",v.Name)
                local CharacterItem = indexed[2]:Clone()
                weldmodel(CharacterItem)
                for i,v in pairs(ThirdPersonItem:GetDescendants()) do
                    if v:IsA("Part") or v:IsA("UnionOperation") or v:IsA("MeshPart") then
                        v.Transparency = 1
                    end
                end
                CharacterItem.Parent = ThirdPersonItem
                CharacterItem.PrimaryPart.CFrame = ThirdPersonItem.Handle.CFrame * CFrame.new(0,-0.45,0) * CFrame.Angles(0,math.rad(90),0)
                local weld2 = Instance.new("WeldConstraint",CharacterItem)
                weld2.Part0 = CharacterItem.PrimaryPart
                weld2.Part1 = ThirdPersonItem.Handle
            end
        end
    end
end
end)
end
end
})
